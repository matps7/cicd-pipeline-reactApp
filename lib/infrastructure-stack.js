"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InfrastuctureStack = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const s3 = require("aws-cdk-lib/aws-s3");
const s3Deploy = require("aws-cdk-lib/aws-s3-deployment");
const cloudfront = require("aws-cdk-lib/aws-cloudfront");
const origins = require("aws-cdk-lib/aws-cloudfront-origins");
// todo: this could probably be split into smaller constructs as it's getting fairly big
class InfrastuctureStack extends aws_cdk_lib_1.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        // Frontend
        const bucket = new s3.Bucket(this, 'FrontendReactBucket', {
            removalPolicy: aws_cdk_lib_1.RemovalPolicy.DESTROY,
            autoDeleteObjects: true,
            encryption: s3.BucketEncryption.S3_MANAGED,
        });
        const originAccessIdentity = new cloudfront.OriginAccessIdentity(this, 'OriginAccessIdentity');
        bucket.grantRead(originAccessIdentity);
        const distribution = new cloudfront.Distribution(this, 'FrontendStaticDistribution', {
            defaultBehavior: {
                origin: new origins.S3Origin(bucket, { originAccessIdentity }),
                viewerProtocolPolicy: cloudfront.ViewerProtocolPolicy.REDIRECT_TO_HTTPS,
            },
            defaultRootObject: 'index.html'
        });
        // Frontend code and assets deployment
        new s3Deploy.BucketDeployment(this, 'DeployFrontend', {
            sources: [s3Deploy.Source.asset('reactwebapp/build')],
            destinationBucket: bucket,
            // ensures cloudfront cache invalidation on deploy:
            distribution: distribution,
        });
        // todo: add outputs for things like full domain name / url
    }
}
exports.InfrastuctureStack = InfrastuctureStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5mcmFzdHJ1Y3R1cmUtc3RhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmZyYXN0cnVjdHVyZS1zdGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw2Q0FBbUQ7QUFHbkQseUNBQXlDO0FBQ3pDLDBEQUEwRDtBQUMxRCx5REFBeUQ7QUFDekQsOERBQThEO0FBRzlELHdGQUF3RjtBQUN4RixNQUFhLGtCQUFtQixTQUFRLG1CQUFLO0lBQzNDLFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsS0FBc0I7UUFDOUQsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFeEIsV0FBVztRQUNYLE1BQU0sTUFBTSxHQUFHLElBQUksRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUscUJBQXFCLEVBQUU7WUFDeEQsYUFBYSxFQUFFLDJCQUFhLENBQUMsT0FBTztZQUNwQyxpQkFBaUIsRUFBRSxJQUFJO1lBQ3ZCLFVBQVUsRUFBRSxFQUFFLENBQUMsZ0JBQWdCLENBQUMsVUFBVTtTQUkzQyxDQUFDLENBQUM7UUFFSCxNQUFNLG9CQUFvQixHQUFHLElBQUksVUFBVSxDQUFDLG9CQUFvQixDQUFDLElBQUksRUFBRSxzQkFBc0IsQ0FBQyxDQUFDO1FBQy9GLE1BQU0sQ0FBQyxTQUFTLENBQUMsb0JBQW9CLENBQUMsQ0FBQztRQUV2QyxNQUFNLFlBQVksR0FBRyxJQUFJLFVBQVUsQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLDRCQUE0QixFQUFFO1lBQ25GLGVBQWUsRUFBRTtnQkFDZixNQUFNLEVBQUUsSUFBSSxPQUFPLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxFQUFFLG9CQUFvQixFQUFFLENBQUM7Z0JBQzlELG9CQUFvQixFQUFFLFVBQVUsQ0FBQyxvQkFBb0IsQ0FBQyxpQkFBaUI7YUFDeEU7WUFDRCxpQkFBaUIsRUFBRSxZQUFZO1NBQ2hDLENBQUMsQ0FBQztRQUVILHNDQUFzQztRQUN0QyxJQUFJLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCLEVBQUU7WUFDcEQsT0FBTyxFQUFFLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsbUJBQW1CLENBQUMsQ0FBQztZQUNyRCxpQkFBaUIsRUFBRSxNQUFNO1lBQ3pCLG1EQUFtRDtZQUNuRCxZQUFZLEVBQUUsWUFBWTtTQUMzQixDQUFDLENBQUM7UUFFSCwyREFBMkQ7SUFDN0QsQ0FBQztDQUNGO0FBbkNELGdEQW1DQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN0YWNrLCBSZW1vdmFsUG9saWN5IH0gZnJvbSAnYXdzLWNkay1saWInO1xyXG5pbXBvcnQgKiBhcyBjZGsgZnJvbSAnYXdzLWNkay1saWInO1xyXG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tICdjb25zdHJ1Y3RzJztcclxuaW1wb3J0ICogYXMgczMgZnJvbSAnYXdzLWNkay1saWIvYXdzLXMzJztcclxuaW1wb3J0ICogYXMgczNEZXBsb3kgZnJvbSAnYXdzLWNkay1saWIvYXdzLXMzLWRlcGxveW1lbnQnO1xyXG5pbXBvcnQgKiBhcyBjbG91ZGZyb250IGZyb20gJ2F3cy1jZGstbGliL2F3cy1jbG91ZGZyb250JztcclxuaW1wb3J0ICogYXMgb3JpZ2lucyBmcm9tICdhd3MtY2RrLWxpYi9hd3MtY2xvdWRmcm9udC1vcmlnaW5zJztcclxuXHJcblxyXG4vLyB0b2RvOiB0aGlzIGNvdWxkIHByb2JhYmx5IGJlIHNwbGl0IGludG8gc21hbGxlciBjb25zdHJ1Y3RzIGFzIGl0J3MgZ2V0dGluZyBmYWlybHkgYmlnXHJcbmV4cG9ydCBjbGFzcyBJbmZyYXN0dWN0dXJlU3RhY2sgZXh0ZW5kcyBTdGFjayB7XHJcbiAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM/OiBjZGsuU3RhY2tQcm9wcykge1xyXG4gICAgc3VwZXIoc2NvcGUsIGlkLCBwcm9wcyk7XHJcblxyXG4gICAgLy8gRnJvbnRlbmRcclxuICAgIGNvbnN0IGJ1Y2tldCA9IG5ldyBzMy5CdWNrZXQodGhpcywgJ0Zyb250ZW5kUmVhY3RCdWNrZXQnLCB7XHJcbiAgICAgIHJlbW92YWxQb2xpY3k6IFJlbW92YWxQb2xpY3kuREVTVFJPWSwgLy8gYWxsIG9iamVjdHMgY2FuIGJlIHJlc3RvcmVkIGZyb20gY29kZVxyXG4gICAgICBhdXRvRGVsZXRlT2JqZWN0czogdHJ1ZSxcclxuICAgICAgZW5jcnlwdGlvbjogczMuQnVja2V0RW5jcnlwdGlvbi5TM19NQU5BR0VELFxyXG4gICAgICAvLyBDb3VsZG4ndCBnZXQgZXJyb3IgcGFnZSByZWRpcmVjdGlvbiB0byB3b3JrIHdpdGggY2xvdWRmcm9udC5cclxuICAgICAgLy8gSSB0aGluayB0aGF0IG5lZWRzIHB1YmxpYyBwZXJtaXNzaW9ucyB0byB3b3JrLCBub3QganVzdCBvcmlnaW5hbCBhY2Nlc3MgaWRlbnRpdHkgcGVybWlzc2lvbixcclxuICAgICAgLy8gc28gZG9pbmcgZXJyb3IgcGFnZSByZWRpcmVjdGlvbiBpbiBjbG91ZGZyb250IGluc3RlYWQuXHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCBvcmlnaW5BY2Nlc3NJZGVudGl0eSA9IG5ldyBjbG91ZGZyb250Lk9yaWdpbkFjY2Vzc0lkZW50aXR5KHRoaXMsICdPcmlnaW5BY2Nlc3NJZGVudGl0eScpO1xyXG4gICAgYnVja2V0LmdyYW50UmVhZChvcmlnaW5BY2Nlc3NJZGVudGl0eSk7XHJcblxyXG4gICAgY29uc3QgZGlzdHJpYnV0aW9uID0gbmV3IGNsb3VkZnJvbnQuRGlzdHJpYnV0aW9uKHRoaXMsICdGcm9udGVuZFN0YXRpY0Rpc3RyaWJ1dGlvbicsIHtcclxuICAgICAgZGVmYXVsdEJlaGF2aW9yOiB7XHJcbiAgICAgICAgb3JpZ2luOiBuZXcgb3JpZ2lucy5TM09yaWdpbihidWNrZXQsIHsgb3JpZ2luQWNjZXNzSWRlbnRpdHkgfSksXHJcbiAgICAgICAgdmlld2VyUHJvdG9jb2xQb2xpY3k6IGNsb3VkZnJvbnQuVmlld2VyUHJvdG9jb2xQb2xpY3kuUkVESVJFQ1RfVE9fSFRUUFMsXHJcbiAgICAgIH0sXHJcbiAgICAgIGRlZmF1bHRSb290T2JqZWN0OiAnaW5kZXguaHRtbCdcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIEZyb250ZW5kIGNvZGUgYW5kIGFzc2V0cyBkZXBsb3ltZW50XHJcbiAgICBuZXcgczNEZXBsb3kuQnVja2V0RGVwbG95bWVudCh0aGlzLCAnRGVwbG95RnJvbnRlbmQnLCB7XHJcbiAgICAgIHNvdXJjZXM6IFtzM0RlcGxveS5Tb3VyY2UuYXNzZXQoJ3JlYWN0d2ViYXBwL2J1aWxkJyldLFxyXG4gICAgICBkZXN0aW5hdGlvbkJ1Y2tldDogYnVja2V0LFxyXG4gICAgICAvLyBlbnN1cmVzIGNsb3VkZnJvbnQgY2FjaGUgaW52YWxpZGF0aW9uIG9uIGRlcGxveTpcclxuICAgICAgZGlzdHJpYnV0aW9uOiBkaXN0cmlidXRpb24sXHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyB0b2RvOiBhZGQgb3V0cHV0cyBmb3IgdGhpbmdzIGxpa2UgZnVsbCBkb21haW4gbmFtZSAvIHVybFxyXG4gIH1cclxufVxyXG4iXX0=